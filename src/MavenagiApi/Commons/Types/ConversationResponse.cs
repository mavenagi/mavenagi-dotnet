using System.Text.Json;
using System.Text.Json.Serialization;
using MavenagiApi.Core;

namespace MavenagiApi;

[Serializable]
public record ConversationResponse
{
    /// <summary>
    /// The messages in the conversation
    /// </summary>
    [JsonPropertyName("messages")]
    public IEnumerable<object> Messages { get; set; } = new List<object>();

    /// <summary>
    /// The attachments associated with this conversation. Additional attachments may be associated to individual messages.
    ///
    /// Message attachments are included in LLM context, conversation attachments are not.
    /// </summary>
    [JsonPropertyName("attachments")]
    public IEnumerable<AttachmentResponse> Attachments { get; set; } =
        new List<AttachmentResponse>();

    /// <summary>
    /// Optional configurations for responses to this conversation
    /// </summary>
    [JsonPropertyName("responseConfig")]
    public ResponseConfig? ResponseConfig { get; set; }

    /// <summary>
    /// The subject of the conversation
    /// </summary>
    [JsonPropertyName("subject")]
    public string? Subject { get; set; }

    /// <summary>
    /// The url of the conversation
    /// </summary>
    [JsonPropertyName("url")]
    public string? Url { get; set; }

    /// <summary>
    /// The date and time the conversation was created
    /// </summary>
    [JsonPropertyName("createdAt")]
    public DateTime? CreatedAt { get; set; }

    /// <summary>
    /// The date and time the conversation was last updated
    /// </summary>
    [JsonPropertyName("updatedAt")]
    public DateTime? UpdatedAt { get; set; }

    /// <summary>
    /// The tags of the conversation. Used for filtering in Agent Designer.
    /// </summary>
    [JsonPropertyName("tags")]
    public HashSet<string>? Tags { get; set; }

    /// <summary>
    /// The metadata of the conversation supplied by the app which created the conversation.
    /// </summary>
    [JsonPropertyName("metadata")]
    public Dictionary<string, string>? Metadata { get; set; }

    /// <summary>
    /// All metadata for the conversation. Keyed by appId.
    /// </summary>
    [JsonPropertyName("allMetadata")]
    public Dictionary<string, Dictionary<string, string>> AllMetadata { get; set; } =
        new Dictionary<string, Dictionary<string, string>>();

    /// <summary>
    /// The ID that uniquely identifies this conversation
    /// </summary>
    [JsonPropertyName("conversationId")]
    public required EntityId ConversationId { get; set; }

    /// <summary>
    /// An analysis of the conversation. Fields are generated by Maven via an analysis of user messages. This object is calculated on a delay. Fields will not be up to date on ask requests.
    /// </summary>
    [JsonPropertyName("analysis")]
    public required ConversationAnalysis Analysis { get; set; }

    /// <summary>
    /// A summary of the conversation. Fields are calculated from conversation data. Unlike analysis, all fields can be derived from other data available in the API. This object is provided as a convenience and is calculated on a delay. Fields will not be up to date on ask requests.
    /// </summary>
    [JsonPropertyName("summary")]
    public required ConversationSummary Summary { get; set; }

    /// <summary>
    /// Whether the conversation user-specific data has been deleted. See `deleteConversation` for details.
    /// </summary>
    [JsonPropertyName("deleted")]
    public required bool Deleted { get; set; }

    /// <summary>
    /// Whether the conversation is able to receive asynchronous messages.
    /// Only applicable if a conversation is initialized with the `ASYNC` capability. Defaults to true. Can be closed using the `PATCH` API.
    /// </summary>
    [JsonPropertyName("open")]
    public required bool Open { get; set; }

    /// <summary>
    /// Whether the LLM is enabled for this conversation.
    /// If true, `USER` messages sent via the ask API will be sent to the LLM and a `BOT_RESPONSE` or `BOT_SUGGESTION` message will be generated.
    /// If false, `USER` messages will not be sent to the LLM.
    /// </summary>
    [JsonPropertyName("llmEnabled")]
    public required bool LlmEnabled { get; set; }

    /// <summary>
    /// Additional properties received from the response, if any.
    /// </summary>
    /// <remarks>
    /// [EXPERIMENTAL] This API is experimental and may change in future releases.
    /// </remarks>
    [JsonExtensionData]
    public IDictionary<string, JsonElement> AdditionalProperties { get; internal set; } =
        new Dictionary<string, JsonElement>();

    /// <inheritdoc />
    public override string ToString()
    {
        return JsonUtils.Serialize(this);
    }
}
